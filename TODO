TODO
- Make rudimentary lines work
  - Use QGraphicsPathItem for connectors ... probably
- Add logging for debugging etc.
- Create a dummy folder/flow data structure, and play with the left pane
- Make resources work like they do in Designer
- I shouldn't represent the grid as a QGraphicsItem.
  Instead, I should draw it inside reimplementation of drawBackground().
- Box text should be centered (needs using text instead of static text?)

REF
- Qt5 Tutorial Customizing Items by inheriting QGraphicsItem
  https://www.bogotobogo.com/Qt/Qt5_QGraphicsView_QGraphicsScene_QGraphicsItems.php
- Session Management
  https://doc.qt.io/qt-5/session.html

- https://www.bogotobogo.com/Qt/Qt5_QGraphicsView_QGraphicsScene_QGraphicsItems.php
- https://www.bogotobogo.com/Qt/Qt5_QTreeWidget.php

- When moving a selection of several items, perhaps need to temporarily wrap them in a group.


WORK LOG

- Layers
I wanted to ensure that connector lines are drawn behind boxes, but I think the Qt layer model involves only "foreground" and "background", plus a z-axis that seems to be not well integrated into graphic items. So I tried just putting all the boxes into one group, and all the connectors into another -- but that screws up the ability to grab-and-drag the boxes around on the canvas. Bummer. So the groups went away again (leaving just the one for the background grid).

- Boxes and positions
Seems this business of canvas shapes ain't all that easy. I wanted to have CanvasShape be a subclass of QAbstractGraphicsShapeItem, mainly because I wanted my flow boxes to share an ancestor, but poly's and rect's are siblings. This means that I'd kept my own pos() data, and now that I'm painting connectors I find that these positions are of course not being updated as items are moved around (I know, right). Perhaps I can just make my rhombus out of a rect that has surprising implementations of draw() and shape()?
...perhaps rename CanvasShape to CanvasBox...

- Connectors
My idea with connectors (lines) is to have each flow box have 'anchor' points at reasonable positions (middle of sides for (round) rects, pointy bits for rhombi) and then attach the connectors to those points. Also, my idea with lines is to have them be rectangular, so that they will either be I-, L-, or Z- shaped. It would be neat to give them rounded corners, but that's really only nice-to-have. Lines must of course also have an arrow head at the destination, and some lines (out of conditionals, as well as exception handlers) should have (program-defined) labels near their source anchor.


MISC. NOTES ('cuz I'm still a Python newbie)

- Don't include VENV folder structure in Git
  - See https://stackoverflow.com/a/44827829/14577190 for why not
  - See https://stackoverflow.com/a/6590783/14577190 for what to do instead
